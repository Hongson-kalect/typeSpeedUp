datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Asset {
  isDeleted Boolean @default(false)
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  gold     Int
  crystal  Int
  themes   String[] @db.ObjectId
  user AppUser?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Ban {
  isDeleted Boolean @default(false)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId @unique
  user      AppUser     @relation(fields: [userId], references: [id])
  time      DateTime
  permanent String
  reason    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Device {
  isDeleted Boolean @default(false)
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  user     AppUser     @relation(fields: [userId], references: [id])
  ip       String
  time     DateTime
  location String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Favorite {
  isDeleted Boolean @default(false)
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       AppUser  @relation(fields: [userId], references: [id]) 
  type       String
  targetId    String  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Game {
  isDeleted Boolean @default(false)
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  tag             String
  genre           String
  // gameInfoId      String   @db.ObjectId @unique
  gameInfo        GameInfo []
  // defaultLanguage String
  defaultLanguageId String @db.ObjectId
  defaultLanguage Language @relation(fields: [defaultLanguageId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model GameInfo {
  isDeleted Boolean @default(false)
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  played          Int
  stage           String
  completed       Int
  isNew           Boolean
  hotPoint           Float
  recoverEmail    String
  ban             String
  gameId          String @db.ObjectId
  game            Game  @relation(fields: [gameId] , references: [id])
  languageId String @db.ObjectId
  languages Language @relation(fields: [languageId] , references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Language {
  isDeleted Boolean @default(false)
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  code  String
  flag  String
  desc  String?
  gameInfo GameInfo[]
  paragraphs Paragraph[]
  gameDefaultLanguage Game[]
  novelDefaultLanguage Novel[]
  setting Setting[]
  typeStyle TypeStyle[]
  word Word[]
  wordRate WordRate[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Novel {
  isDeleted Boolean @default(false)
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  defaultLanguageId String @db.ObjectId
  defaultLanguage Language @relation(fields: [defaultLanguageId], references: [id])
  userId          String   @db.ObjectId
  user            AppUser     @relation(fields: [userId], references: [id])
  level           String?
  name            String?
  rate            Float?
  rateTime        Int?
  price           String?
  unit            String?
  isPrivate Boolean @default(false)
  tag             String?
  desc            String?
  paragraphs      Paragraph[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Paragraph {
  isDeleted Boolean @default(false)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  languageId String  @db.ObjectId
  language  Language @relation(fields: [languageId], references: [id])
  header    String
  content   String
  desc      String @default("")
  chapter   String?
  rate      Float @default(0)
  rateTime  Int @default(0)
  prev      String?
  next      String?
  isPrivate Boolean @default(false)
  completed Int @default(0)
  userId    String  @db.ObjectId
  user      AppUser    @relation(fields: [userId], references: [id])
  novelId String @db.ObjectId
  novel Novel @relation(fields: [novelId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Profile {
  isDeleted Boolean @default(false)
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  born        Int
  gender      Boolean
  firstName   String
  lastName    String
  displayName String?
  nation      String
  avatar      String?
  role        String?
  user AppUser?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Rank {
  isDeleted Boolean @default(false)
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         AppUser     @relation(fields: [userId], references: [id])
  game         String @db.ObjectId
  rank         Int?
  score        Float
  time         String
  recoverEmail String
  desc         String @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Rate {
  isDeleted Boolean @default(false)
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         AppUser     @relation(fields: [userId], references: [id])
  type         String
  targetId       String
  rate         Float
  // crossPlatform String
  // platformID   String
  // recoverEmail String
  desc         String @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Report {
  isDeleted Boolean @default(false)
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         AppUser     @relation(fields: [userId], references: [id])
  type         String
  targetId       String
  reportType   String
  desc         String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Score {
  isDeleted Boolean @default(false)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      AppUser     @relation(fields: [userId], references: [id])
  type      String
  targetId    String  //para
  wps       Float
  cps       Float
  score     Float
  wa        Float
  time      Int
  ca        Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Setting {
  isDeleted Boolean @default(false)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      AppUser?
  languageId String  @db.ObjectId
  language  Language @relation(fields: [languageId], references: [id])
  themes    String[] @db.ObjectId
  typeStyleId String @db.ObjectId
  typeStyle TypeStyle @relation(fields: [typeStyleId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SpecialRule {
  isDeleted Boolean @default(false)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  typeStyleId String @db.ObjectId
  typeStyle TypeStyle @relation(fields: [typeStyleId], references: [id])
  input     String
  output    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Store {
  isDeleted Boolean @default(false)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  themeId   String   @db.ObjectId
  themes    String @db.ObjectId
  price     Int
  unit      String
  desc      String
  rate      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Theme {
  isDeleted Boolean @default(false)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  src       String
  style     String
  desc      String
  // rateId    String   @db.ObjectId
  // rate      Rate     @relation(fields: [rateId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TypeStyle {
  isDeleted Boolean @default(false)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  languageId String  @db.ObjectId
  language  Language @relation(fields: [languageId], references: [id])
  setting Setting[]
  specialRule SpecialRule[]
  code      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Word {
  isDeleted Boolean @default(false)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  languageId String  @db.ObjectId
  language  Language @relation(fields: [languageId], references: [id])
  level     String
  type      String
  words     String
  desc      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WordRate {
  isDeleted Boolean @default(false)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  languageId String  @db.ObjectId
  language  Language @relation(fields: [languageId], references: [id])
  rate      String
  level     String
  desc      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AppUser {
  isDeleted Boolean @default(false)
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  username      String?
  password      String?
  scope  String @default("S1")
  access_token String?
  refresh_token String?

  recoverEmail  String?
  ban           Ban?
  favorite  Favorite[]
  novels Novel[]
  paragraph Paragraph[]
  score Score[]
  rank Rank[]
  rate Rate[]
  report Report[]
  userId String   @db.ObjectId @unique
  user User @relation(fields: [userId], references: [id])

  profileId     String?   @db.ObjectId @unique
  profile       Profile?  @relation(fields: [profileId], references: [id])
  settingId     String?   @db.ObjectId @unique
  setting       Setting?  @relation(fields: [settingId], references: [id])
  assetId       String?   @db.ObjectId @unique
  asset         Asset?    @relation(fields: [assetId], references: [id])
  devices       Device[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  appUser AppUser?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}